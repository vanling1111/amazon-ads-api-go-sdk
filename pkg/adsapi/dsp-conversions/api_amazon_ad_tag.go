
/*
 * Conversions API
 *
 * Conversion management.
 *
 * API version: 3.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package dspconversions

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"fmt"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type AmazonAdTagApiService service
/*
AmazonAdTagApiService Gets an Amazon Ad Tag for a given advertiser
  **Authorized resource type**: DSP Rodeo Entity ID, DSP Advertiser Account ID  **Parameter name**: Amazon-Ads-AccountId  **Parameter in**: header  **Requires one of these permissions**: [\&quot;event_manager_view\&quot;]  **Authorized resource type**: Global Manager Account ID  **Parameter name**: Amazon-Ads-Manager-Account-ID  **Parameter in**: header  **Requires one of these permissions**: [\&quot;ads_data_manager_view\&quot;]
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param amazonAdvertisingAPIClientId The identifier of a client associated with a &#x60;Login with Amazon&#x60; account.
 * @param accountId Account Identifier you use to access the DSP. This is your DSP Advertiser ID. DSP Entity ID is not supported.
 * @param optional nil or *AmazonAdTagApiDspAmazonAdTagGetAdTagByAdvertiserIdOpts - Optional Parameters:
     * @param "AmazonAdvertisingAPIScope" (optional.String) -  The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id profileId from the response to pass it as input.
     * @param "AmazonAdsAccountId" (optional.String) -  Account Identifier you use to access the DSP. This is your DSP Advertiser ID. This header is required for access to any DSP data when you have been directly invited to the advertiser.
     * @param "AmazonAdsManagerAccountID" (optional.String) -  The identifier of an Amazon Ads Manager Account. This ID can be retrieved by making a GET request to the /managerAccounts endpoint.
@return GetAdTagResponseV1
*/

type AmazonAdTagApiDspAmazonAdTagGetAdTagByAdvertiserIdOpts struct {
    AmazonAdvertisingAPIScope optional.String
    AmazonAdsAccountId optional.String
    AmazonAdsManagerAccountID optional.String
}

func (a *AmazonAdTagApiService) DspAmazonAdTagGetAdTagByAdvertiserId(ctx context.Context, amazonAdvertisingAPIClientId string, accountId string, localVarOptionals *AmazonAdTagApiDspAmazonAdTagGetAdTagByAdvertiserIdOpts) (GetAdTagResponseV1, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue GetAdTagResponseV1
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/accounts/{accountId}/dsp/amazonAdTag"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", fmt.Sprintf("%v", accountId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/vnd.dspamazonadtags.v1+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarHeaderParams["Amazon-Advertising-API-ClientId"] = parameterToString(amazonAdvertisingAPIClientId, "")
	if localVarOptionals != nil && localVarOptionals.AmazonAdvertisingAPIScope.IsSet() {
		localVarHeaderParams["Amazon-Advertising-API-Scope"] = parameterToString(localVarOptionals.AmazonAdvertisingAPIScope.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.AmazonAdsAccountId.IsSet() {
		localVarHeaderParams["Amazon-Ads-AccountId"] = parameterToString(localVarOptionals.AmazonAdsAccountId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.AmazonAdsManagerAccountID.IsSet() {
		localVarHeaderParams["Amazon-Ads-Manager-Account-ID"] = parameterToString(localVarOptionals.AmazonAdsManagerAccountID.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v GetAdTagResponseV1
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v DspErrorV1
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 401 {
			var v DspErrorV1
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 429 {
			var v DspErrorV1
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v DspErrorV1
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AmazonAdTagApiService Gets a list of available event metadata for the given ad tag.
  **Authorized resource type**: DSP Rodeo Entity ID, DSP Advertiser Account ID  **Parameter name**: Amazon-Ads-AccountId  **Parameter in**: header  **Requires one of these permissions**: [\&quot;event_manager_view\&quot;]  **Authorized resource type**: Global Manager Account ID  **Parameter name**: Amazon-Ads-Manager-Account-ID  **Parameter in**: header  **Requires one of these permissions**: [\&quot;ads_data_manager_view\&quot;]
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param amazonAdvertisingAPIClientId The identifier of a client associated with a &#x60;Login with Amazon&#x60; account.
 * @param accountId Account Identifier you use to access the DSP. This is your DSP Advertiser ID. DSP Entity ID is not supported.
 * @param adTagId The identifier of the ad tag.
 * @param optional nil or *AmazonAdTagApiDspAmazonAdTagGetEventsByAdTagIdOpts - Optional Parameters:
     * @param "AmazonAdvertisingAPIScope" (optional.String) -  The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id profileId from the response to pass it as input.
     * @param "AmazonAdsAccountId" (optional.String) -  Account Identifier you use to access the DSP. This is your DSP Advertiser ID. This header is required for access to any DSP data when you have been directly invited to the advertiser.
     * @param "AmazonAdsManagerAccountID" (optional.String) -  The identifier of an Amazon Ads Manager Account. This ID can be retrieved by making a GET request to the /managerAccounts endpoint.
     * @param "SearchTerm" (optional.String) -  A string used to fuzzy search for event metadata by event name.
     * @param "StartDateTime" (optional.Time) -  A date string to create a time window for events that have seen activity. If not set, a start date 30 days before the request was sent will be chosen. The oldest start date is 1 year before the request was sent to this api.
     * @param "NextToken" (optional.String) -  Token from a previous request. Use to control pagination of the returned array.
     * @param "MaxResults" (optional.Int32) -  Sets the maximum number of associated conversions in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @param "EndDateTime" (optional.Time) -  A date string to create a time window for events that have seen activity. If not set, the day and time the request was sent will be chosen as the end date. The maximum end date is the day the request to this api was sent.
@return ListAdTagEventsResponseV1
*/

type AmazonAdTagApiDspAmazonAdTagGetEventsByAdTagIdOpts struct {
    AmazonAdvertisingAPIScope optional.String
    AmazonAdsAccountId optional.String
    AmazonAdsManagerAccountID optional.String
    SearchTerm optional.String
    StartDateTime optional.Time
    NextToken optional.String
    MaxResults optional.Int32
    EndDateTime optional.Time
}

func (a *AmazonAdTagApiService) DspAmazonAdTagGetEventsByAdTagId(ctx context.Context, amazonAdvertisingAPIClientId string, accountId string, adTagId string, localVarOptionals *AmazonAdTagApiDspAmazonAdTagGetEventsByAdTagIdOpts) (ListAdTagEventsResponseV1, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ListAdTagEventsResponseV1
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/accounts/{accountId}/dsp/adTagEvents/{adTagId}/list"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", fmt.Sprintf("%v", accountId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"adTagId"+"}", fmt.Sprintf("%v", adTagId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.SearchTerm.IsSet() {
		localVarQueryParams.Add("searchTerm", parameterToString(localVarOptionals.SearchTerm.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartDateTime.IsSet() {
		localVarQueryParams.Add("startDateTime", parameterToString(localVarOptionals.StartDateTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NextToken.IsSet() {
		localVarQueryParams.Add("nextToken", parameterToString(localVarOptionals.NextToken.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxResults.IsSet() {
		localVarQueryParams.Add("maxResults", parameterToString(localVarOptionals.MaxResults.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndDateTime.IsSet() {
		localVarQueryParams.Add("endDateTime", parameterToString(localVarOptionals.EndDateTime.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/vnd.dspamazonadtagevents.v1+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarHeaderParams["Amazon-Advertising-API-ClientId"] = parameterToString(amazonAdvertisingAPIClientId, "")
	if localVarOptionals != nil && localVarOptionals.AmazonAdvertisingAPIScope.IsSet() {
		localVarHeaderParams["Amazon-Advertising-API-Scope"] = parameterToString(localVarOptionals.AmazonAdvertisingAPIScope.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.AmazonAdsAccountId.IsSet() {
		localVarHeaderParams["Amazon-Ads-AccountId"] = parameterToString(localVarOptionals.AmazonAdsAccountId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.AmazonAdsManagerAccountID.IsSet() {
		localVarHeaderParams["Amazon-Ads-Manager-Account-ID"] = parameterToString(localVarOptionals.AmazonAdsManagerAccountID.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v ListAdTagEventsResponseV1
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v DspErrorV1
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 401 {
			var v DspErrorV1
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 403 {
			var v DspErrorV1
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 429 {
			var v DspErrorV1
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v DspErrorV1
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
