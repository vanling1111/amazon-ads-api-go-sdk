
/*
 * Advertising Billing
 *
 * APIs that enable integrators to manage different aspects of billing for their account like Addresses, Taxes, Payments, Invoices etc..
 *
 * API version: 3.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package billing

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"fmt"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type BillingProfilesApiService service
/*
BillingProfilesApiService API to link one or more countries with a billing profile. This association is known as &#x27;applying&#x27; a billing profile.
API to link one or more countries with a billing profile. The linked BillingProfile&#x27;s billing informationwill be used for invoicing, taxes and other billing workflows. A single billing profile can be linked to multiple countries.  **Authorized resource type**: Global Ad Account ID, Profile ID  **Parameter name**: Amazon-Ads-AccountId  **Parameter in**: header  **Requires one of these permissions**: [\&quot;adv_billing_view\&quot;,\&quot;adv_billing_edit\&quot;,\&quot;MasterAccount_Manager\&quot;,\&quot;ManagerAccount_Dev\&quot;]  **Authorized resource type**: Global Manager Account ID, Profile ID  **Parameter name**: Amazon-Advertising-API-Manager-Account  **Parameter in**: header  **Requires one of these permissions**: [\&quot;adv_billing_view\&quot;,\&quot;adv_billing_edit\&quot;,\&quot;MasterAccount_Manager\&quot;,\&quot;ManagerAccount_Dev\&quot;]
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param body The request body accepts a list of billing profile identifiers and advertisers for association.
 * @param amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
 * @param optional nil or *BillingProfilesApiApplyBillingProfileOpts - Optional Parameters:
     * @param "AmazonAdsAccountId" (optional.String) -  The identifier of an account. Account can be a global advertising account.
     * @param "AmazonAdvertisingAPIManagerAccount" (optional.String) -  The identifier of a manager account.
@return ApplyBillingProfileResponse
*/

type BillingProfilesApiApplyBillingProfileOpts struct {
    AmazonAdsAccountId optional.String
    AmazonAdvertisingAPIManagerAccount optional.String
}

func (a *BillingProfilesApiService) ApplyBillingProfile(ctx context.Context, body ApplyBillingProfileRequest, amazonAdvertisingAPIClientId string, localVarOptionals *BillingProfilesApiApplyBillingProfileOpts) (ApplyBillingProfileResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ApplyBillingProfileResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/billingProfileUsages"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/vnd.billingProfileUsage.v1+json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/vnd.billingProfileUsage.v1+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarHeaderParams["Amazon-Advertising-API-ClientId"] = parameterToString(amazonAdvertisingAPIClientId, "")
	if localVarOptionals != nil && localVarOptionals.AmazonAdsAccountId.IsSet() {
		localVarHeaderParams["Amazon-Ads-AccountId"] = parameterToString(localVarOptionals.AmazonAdsAccountId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.AmazonAdvertisingAPIManagerAccount.IsSet() {
		localVarHeaderParams["Amazon-Advertising-API-Manager-Account"] = parameterToString(localVarOptionals.AmazonAdvertisingAPIManagerAccount.Value(), "")
	}
	// body params
	localVarPostBody = &body
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 207 {
			var v ApplyBillingProfileResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v BillingProfileErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 401 {
			var v BillingProfileErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v BillingProfileErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
BillingProfilesApiService API to create one or more billing profile(s).
Creates one or more billing profiles. A Billing Profile contains billing information (address, taxes, agreements etc..) that will be used for invoicing and other billing workflows. Currently, Billing Profiles can only be created for a Global Sponsored Ads vendor account. Please note that you need to link (&#x60;POST /billingProfileUsages&#x60;) a billingProfile to a country for that billingInformation to be used for that country.  **Authorized resource type**: Global Ad Account ID, Profile ID  **Parameter name**: Amazon-Ads-AccountId  **Parameter in**: header  **Requires one of these permissions**: [\&quot;adv_billing_view\&quot;,\&quot;adv_billing_edit\&quot;,\&quot;MasterAccount_Manager\&quot;,\&quot;ManagerAccount_Dev\&quot;]  **Authorized resource type**: Global Manager Account ID, Profile ID  **Parameter name**: Amazon-Advertising-API-Manager-Account  **Parameter in**: header  **Requires one of these permissions**: [\&quot;adv_billing_view\&quot;,\&quot;adv_billing_edit\&quot;,\&quot;MasterAccount_Manager\&quot;,\&quot;ManagerAccount_Dev\&quot;]
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param body The request body accepts a list of billing profiles to be created in batch.
 * @param amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
 * @param optional nil or *BillingProfilesApiCreateBillingProfilesOpts - Optional Parameters:
     * @param "AmazonAdsAccountId" (optional.String) -  The identifier of an account. Account can be a global advertising account.
     * @param "AmazonAdvertisingAPIManagerAccount" (optional.String) -  The identifier of a manager account.
@return CreateOrUpdateBillingProfilesResponse
*/

type BillingProfilesApiCreateBillingProfilesOpts struct {
    AmazonAdsAccountId optional.String
    AmazonAdvertisingAPIManagerAccount optional.String
}

func (a *BillingProfilesApiService) CreateBillingProfiles(ctx context.Context, body CreateBillingProfilesRequest, amazonAdvertisingAPIClientId string, localVarOptionals *BillingProfilesApiCreateBillingProfilesOpts) (CreateOrUpdateBillingProfilesResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue CreateOrUpdateBillingProfilesResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/billingProfiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/vnd.billingProfile.v1+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarHeaderParams["Amazon-Advertising-API-ClientId"] = parameterToString(amazonAdvertisingAPIClientId, "")
	if localVarOptionals != nil && localVarOptionals.AmazonAdsAccountId.IsSet() {
		localVarHeaderParams["Amazon-Ads-AccountId"] = parameterToString(localVarOptionals.AmazonAdsAccountId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.AmazonAdvertisingAPIManagerAccount.IsSet() {
		localVarHeaderParams["Amazon-Advertising-API-Manager-Account"] = parameterToString(localVarOptionals.AmazonAdvertisingAPIManagerAccount.Value(), "")
	}
	// body params
	localVarPostBody = &body
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 207 {
			var v CreateOrUpdateBillingProfilesResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v BillingProfileErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 401 {
			var v BillingProfileErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v BillingProfileErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
BillingProfilesApiService API to fetch agreement contents related to billing profiles.
User needs to provide consent to certain agreements before creating a billing profile. This API provides a way for users to go through the agreement content.  **Authorized resource type**: Global Ad Account ID, Profile ID  **Parameter name**: Amazon-Ads-AccountId  **Parameter in**: header  **Requires one of these permissions**: [\&quot;adv_billing_view\&quot;,\&quot;adv_billing_edit\&quot;,\&quot;MasterAccount_Viewer\&quot;,\&quot;MasterAccount_Manager\&quot;,\&quot;ManagerAccount_Dev\&quot;]  **Authorized resource type**: Global Manager Account ID, Profile ID  **Parameter name**: Amazon-Advertising-API-Manager-Account  **Parameter in**: header  **Requires one of these permissions**: [\&quot;adv_billing_view\&quot;,\&quot;adv_billing_edit\&quot;,\&quot;MasterAccount_Viewer\&quot;,\&quot;MasterAccount_Manager\&quot;,\&quot;ManagerAccount_Dev\&quot;]
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
 * @param billingProfileAgreementContentId agreementId for which the content needs to be fetched. This is same as the &#x60;documentName&#x60; in create/update billing profiles request
 * @param optional nil or *BillingProfilesApiGetBillingProfileAgreementContentOpts - Optional Parameters:
     * @param "AmazonAdsAccountId" (optional.String) -  The identifier of an account. Account can be a global advertising account.
     * @param "AmazonAdvertisingAPIManagerAccount" (optional.String) -  The identifier of a manager account.
     * @param "LanguageOfPreference" (optional.String) -  This selection controls the language of preference (or &#x60;locale&#x60;) and the returned values of agreement content to match that language. Preferred locale can be chosen among the list of valid language codes. Check the table below for supported language code. &lt;br/&gt;&lt;br/&gt;&lt;table border&#x3D;1&gt;&lt;caption&gt; **Supported Locales Table** &lt;/caption&gt;&lt;tr&gt;    &lt;th&gt;Locale code&lt;/th&gt;    &lt;th&gt;Language&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;    &lt;td&gt;en_US&lt;/td&gt;    &lt;td&gt;English&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;    &lt;td&gt;ja_JP&lt;/td&gt;    &lt;td&gt;Japanese&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;    &lt;td&gt;ar_SA&lt;/td&gt;    &lt;td&gt;Arabic&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;    &lt;td&gt;de_DE&lt;/td&gt;    &lt;td&gt;German&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;    &lt;td&gt;fr_FR&lt;/td&gt;    &lt;td&gt;French&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;    &lt;td&gt;it_IT&lt;/td&gt;    &lt;td&gt;Italian&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;    &lt;td&gt;es_MX&lt;/td&gt;    &lt;td&gt;Spanish&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;    &lt;td&gt;nl_NL&lt;/td&gt;    &lt;td&gt;Dutch&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;    &lt;td&gt;sv_SE&lt;/td&gt;    &lt;td&gt;Swedish&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;    &lt;td&gt;pl_PL&lt;/td&gt;    &lt;td&gt;Polish&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;    &lt;td&gt;tr_TR&lt;/td&gt;    &lt;td&gt;Turkish&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;    &lt;td&gt;pt_BR&lt;/td&gt;    &lt;td&gt;Portuguese&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt;
@return BillingProfileAgreementContentResponse
*/

type BillingProfilesApiGetBillingProfileAgreementContentOpts struct {
    AmazonAdsAccountId optional.String
    AmazonAdvertisingAPIManagerAccount optional.String
    LanguageOfPreference optional.String
}

func (a *BillingProfilesApiService) GetBillingProfileAgreementContent(ctx context.Context, amazonAdvertisingAPIClientId string, billingProfileAgreementContentId string, localVarOptionals *BillingProfilesApiGetBillingProfileAgreementContentOpts) (BillingProfileAgreementContentResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue BillingProfileAgreementContentResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/billingProfileAgreementContents/{billingProfileAgreementContentId}"
	localVarPath = strings.Replace(localVarPath, "{"+"billingProfileAgreementContentId"+"}", fmt.Sprintf("%v", billingProfileAgreementContentId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.LanguageOfPreference.IsSet() {
		localVarQueryParams.Add("languageOfPreference", parameterToString(localVarOptionals.LanguageOfPreference.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/vnd.billingProfileAgreement.v1+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarHeaderParams["Amazon-Advertising-API-ClientId"] = parameterToString(amazonAdvertisingAPIClientId, "")
	if localVarOptionals != nil && localVarOptionals.AmazonAdsAccountId.IsSet() {
		localVarHeaderParams["Amazon-Ads-AccountId"] = parameterToString(localVarOptionals.AmazonAdsAccountId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.AmazonAdvertisingAPIManagerAccount.IsSet() {
		localVarHeaderParams["Amazon-Advertising-API-Manager-Account"] = parameterToString(localVarOptionals.AmazonAdvertisingAPIManagerAccount.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v BillingProfileAgreementContentResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 401 {
			var v BillingProfileErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 403 {
			var v BillingProfileErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 404 {
			var v BillingProfileErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v BillingProfileErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
BillingProfilesApiService Lists the billing profiles linked to each country of global ads account.
Lists the billing profiles linked to each country of global ads account. You can further narrow down the search by providing the countries you want the billing profiles for.  **Authorized resource type**: Global Ad Account ID, Profile ID  **Parameter name**: Amazon-Ads-AccountId  **Parameter in**: header  **Requires one of these permissions**: [\&quot;adv_billing_view\&quot;,\&quot;MasterAccount_Viewer\&quot;,\&quot;MasterAccount_Manager\&quot;,\&quot;ManagerAccount_Dev\&quot;]  **Authorized resource type**: Global Manager Account ID, Profile ID  **Parameter name**: Amazon-Advertising-API-Manager-Account  **Parameter in**: header  **Requires one of these permissions**: [\&quot;adv_billing_view\&quot;,\&quot;MasterAccount_Viewer\&quot;,\&quot;MasterAccount_Manager\&quot;,\&quot;ManagerAccount_Dev\&quot;]
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param body The request body to fetch billing profiles linked to each country of global ads account.
 * @param amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
 * @param optional nil or *BillingProfilesApiGetBillingProfileUsagesOpts - Optional Parameters:
     * @param "AmazonAdsAccountId" (optional.String) -  The identifier of an account. Account can be a global advertising account.
     * @param "AmazonAdvertisingAPIManagerAccount" (optional.String) -  The identifier of a manager account.
@return GetBillingProfileUsageResponse
*/

type BillingProfilesApiGetBillingProfileUsagesOpts struct {
    AmazonAdsAccountId optional.String
    AmazonAdvertisingAPIManagerAccount optional.String
}

func (a *BillingProfilesApiService) GetBillingProfileUsages(ctx context.Context, body GetBillingProfileUsageRequest, amazonAdvertisingAPIClientId string, localVarOptionals *BillingProfilesApiGetBillingProfileUsagesOpts) (GetBillingProfileUsageResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue GetBillingProfileUsageResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/billingProfileUsages/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/vnd.billingProfileUsage.v1+json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/vnd.billingProfileUsage.v1+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarHeaderParams["Amazon-Advertising-API-ClientId"] = parameterToString(amazonAdvertisingAPIClientId, "")
	if localVarOptionals != nil && localVarOptionals.AmazonAdsAccountId.IsSet() {
		localVarHeaderParams["Amazon-Ads-AccountId"] = parameterToString(localVarOptionals.AmazonAdsAccountId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.AmazonAdvertisingAPIManagerAccount.IsSet() {
		localVarHeaderParams["Amazon-Advertising-API-Manager-Account"] = parameterToString(localVarOptionals.AmazonAdvertisingAPIManagerAccount.Value(), "")
	}
	// body params
	localVarPostBody = &body
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v GetBillingProfileUsageResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v BillingProfileErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 401 {
			var v BillingProfileErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v BillingProfileErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
BillingProfilesApiService Fetches billing profiles present under the global account. 
Fetches billing profiles present under the global account. You can limit the search results by providing filters like &#x60;defaultBillingProfileFilter&#x60; and &#x60;billingProfileIdFilter&#x60; in which case only results matching the filters will be returned. This is a Paginated API request and returns a paginationToken (&#x60;nextToken&#x60;) if more that &#x60;50&#x60; results match. You can customize the pageSize to be less than &#x60;50&#x60; by providing &#x60;maxResults&#x60; key in request.  **Authorized resource type**: Global Ad Account ID, Profile ID  **Parameter name**: Amazon-Ads-AccountId  **Parameter in**: header  **Requires one of these permissions**: [\&quot;adv_billing_view\&quot;,\&quot;MasterAccount_Viewer\&quot;,\&quot;MasterAccount_Manager\&quot;,\&quot;ManagerAccount_Dev\&quot;]  **Authorized resource type**: Global Manager Account ID, Profile ID  **Parameter name**: Amazon-Advertising-API-Manager-Account  **Parameter in**: header  **Requires one of these permissions**: [\&quot;adv_billing_view\&quot;,\&quot;MasterAccount_Viewer\&quot;,\&quot;MasterAccount_Manager\&quot;,\&quot;ManagerAccount_Dev\&quot;]
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param body The request body to fetch one or more billing profile(s).
 * @param amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
 * @param optional nil or *BillingProfilesApiGetBillingProfilesOpts - Optional Parameters:
     * @param "AmazonAdsAccountId" (optional.String) -  The identifier of an account. Account can be a global advertising account.
     * @param "AmazonAdvertisingAPIManagerAccount" (optional.String) -  The identifier of a manager account.
@return GetBillingProfilesResponse
*/

type BillingProfilesApiGetBillingProfilesOpts struct {
    AmazonAdsAccountId optional.String
    AmazonAdvertisingAPIManagerAccount optional.String
}

func (a *BillingProfilesApiService) GetBillingProfiles(ctx context.Context, body GetBillingProfilesRequest, amazonAdvertisingAPIClientId string, localVarOptionals *BillingProfilesApiGetBillingProfilesOpts) (GetBillingProfilesResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue GetBillingProfilesResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/billingProfiles/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/vnd.billingProfile.v1+json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/vnd.billingProfile.v1+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarHeaderParams["Amazon-Advertising-API-ClientId"] = parameterToString(amazonAdvertisingAPIClientId, "")
	if localVarOptionals != nil && localVarOptionals.AmazonAdsAccountId.IsSet() {
		localVarHeaderParams["Amazon-Ads-AccountId"] = parameterToString(localVarOptionals.AmazonAdsAccountId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.AmazonAdvertisingAPIManagerAccount.IsSet() {
		localVarHeaderParams["Amazon-Advertising-API-Manager-Account"] = parameterToString(localVarOptionals.AmazonAdvertisingAPIManagerAccount.Value(), "")
	}
	// body params
	localVarPostBody = &body
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v GetBillingProfilesResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v BillingProfileErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 401 {
			var v BillingProfileErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v BillingProfileErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
BillingProfilesApiService API to update one or more billing profile(s).
Updates one or more billing profiles under a global account Please note that &#x60;isBillTo&#x60; and &#x60;type&#x60; are immutable attributes and cannot be updated -- in this case, user can always create a new billing profile with same details but with different &#x60;isBillTo&#x60; and &#x60;type&#x60; attribute values.  **Authorized resource type**: Global Ad Account ID, Profile ID  **Parameter name**: Amazon-Ads-AccountId  **Parameter in**: header  **Requires one of these permissions**: [\&quot;adv_billing_view\&quot;,\&quot;adv_billing_edit\&quot;,\&quot;MasterAccount_Manager\&quot;,\&quot;ManagerAccount_Dev\&quot;]  **Authorized resource type**: Global Manager Account ID, Profile ID  **Parameter name**: Amazon-Advertising-API-Manager-Account  **Parameter in**: header  **Requires one of these permissions**: [\&quot;adv_billing_view\&quot;,\&quot;adv_billing_edit\&quot;,\&quot;MasterAccount_Manager\&quot;,\&quot;ManagerAccount_Dev\&quot;]
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param body The request body accepts a list of billing profiles to be updated in batch.
 * @param amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
 * @param optional nil or *BillingProfilesApiUpdateBillingProfilesOpts - Optional Parameters:
     * @param "AmazonAdsAccountId" (optional.String) -  The identifier of an account. Account can be a global advertising account.
     * @param "AmazonAdvertisingAPIManagerAccount" (optional.String) -  The identifier of a manager account.
@return CreateOrUpdateBillingProfilesResponse
*/

type BillingProfilesApiUpdateBillingProfilesOpts struct {
    AmazonAdsAccountId optional.String
    AmazonAdvertisingAPIManagerAccount optional.String
}

func (a *BillingProfilesApiService) UpdateBillingProfiles(ctx context.Context, body UpdateBillingProfilesRequest, amazonAdvertisingAPIClientId string, localVarOptionals *BillingProfilesApiUpdateBillingProfilesOpts) (CreateOrUpdateBillingProfilesResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Put")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue CreateOrUpdateBillingProfilesResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/billingProfiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/vnd.billingProfile.v1+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarHeaderParams["Amazon-Advertising-API-ClientId"] = parameterToString(amazonAdvertisingAPIClientId, "")
	if localVarOptionals != nil && localVarOptionals.AmazonAdsAccountId.IsSet() {
		localVarHeaderParams["Amazon-Ads-AccountId"] = parameterToString(localVarOptionals.AmazonAdsAccountId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.AmazonAdvertisingAPIManagerAccount.IsSet() {
		localVarHeaderParams["Amazon-Advertising-API-Manager-Account"] = parameterToString(localVarOptionals.AmazonAdvertisingAPIManagerAccount.Value(), "")
	}
	// body params
	localVarPostBody = &body
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 207 {
			var v CreateOrUpdateBillingProfilesResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v BillingProfileErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 401 {
			var v BillingProfileErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v BillingProfileErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
