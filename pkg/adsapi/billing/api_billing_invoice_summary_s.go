/*
 * Advertising Billing
 *
 * APIs that enable integrators to manage different aspects of billing for their account like Addresses, Taxes, Payments, Invoices etc..
 *
 * API version: 3.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package billing

import (
	"context"
	"github.com/antihax/optional"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type BillingInvoiceSummarySApiService service

/*
BillingInvoiceSummarySApiService Lists the billing invoice summary(s) in a global ads account as per the search and aggregation parameters passed in the request
Lists the billing invoice summary(s) in a global ads account. You can further narrow down the search by providing filter(s) over country, status, paymentMethod with &#x27;exact&#x27; and &#x27;broad&#x27; match, search over invoice number &amp; ro number and aggregation query(s) over the billing invoice summary(s)  **Authorized resource type**: Global Ad Account ID, Profile ID  **Parameter name**: Amazon-Ads-AccountId  **Parameter in**: header  **Requires one of these permissions**: [\&quot;nemo_transactions_edit\&quot;,\&quot;nemo_transactions_view\&quot;,\&quot;ManagerAccount_Dev\&quot;,\&quot;MasterAccount_Viewer\&quot;,\&quot;MasterAccount_Manager\&quot;]  **Authorized resource type**: Global Manager Account ID  **Parameter name**: Amazon-Advertising-API-Manager-Account  **Parameter in**: header  **Requires one of these permissions**: [\&quot;nemo_transactions_edit\&quot;,\&quot;nemo_transactions_view\&quot;,\&quot;ManagerAccount_Dev\&quot;,\&quot;MasterAccount_Viewer\&quot;,\&quot;MasterAccount_Manager\&quot;]  **Authorized resource type**: DSP Rodeo Entity ID, DSP Advertiser Account ID  **Parameter name**: Amazon-Ads-AccountId  **Parameter in**: header  **Requires one of these permissions**: []
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param body Payload with filter, sort and aggregate key(s) to fetch list of billing invoice summary(s).
 * @param amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
 * @param optional nil or *BillingInvoiceSummarySApiGetBillingInvoiceSummariesOpts - Optional Parameters:
     * @param "AmazonAdsAccountId" (optional.String) -  The identifier of an account. Account can be a global advertising account.
     * @param "AmazonAdvertisingAPIManagerAccount" (optional.String) -  The identifier of a manager account.
@return BillingInvoiceSummariesResponse
*/

type BillingInvoiceSummarySApiGetBillingInvoiceSummariesOpts struct {
	AmazonAdsAccountId                 optional.String
	AmazonAdvertisingAPIManagerAccount optional.String
}

func (a *BillingInvoiceSummarySApiService) GetBillingInvoiceSummaries(ctx context.Context, body BillingInvoiceSummariesRequest, amazonAdvertisingAPIClientId string, localVarOptionals *BillingInvoiceSummarySApiGetBillingInvoiceSummariesOpts) (BillingInvoiceSummariesResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue BillingInvoiceSummariesResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/invoiceSummaries/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/vnd.billingInvoiceSummary.v1+json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/vnd.billingInvoiceSummary.v1+json", "application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarHeaderParams["Amazon-Advertising-API-ClientId"] = parameterToString(amazonAdvertisingAPIClientId, "")
	if localVarOptionals != nil && localVarOptionals.AmazonAdsAccountId.IsSet() {
		localVarHeaderParams["Amazon-Ads-AccountId"] = parameterToString(localVarOptionals.AmazonAdsAccountId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.AmazonAdvertisingAPIManagerAccount.IsSet() {
		localVarHeaderParams["Amazon-Advertising-API-Manager-Account"] = parameterToString(localVarOptionals.AmazonAdvertisingAPIManagerAccount.Value(), "")
	}
	// body params
	localVarPostBody = &body
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v BillingInvoiceSummariesResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v BillingProfileErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 401 {
			var v BillingProfileErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v BillingProfileErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
