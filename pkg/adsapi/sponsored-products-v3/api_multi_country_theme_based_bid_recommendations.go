
/*
 * Sponsored Products
 *
 *  
 *
 * API version: 3.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package sponsoredproductsv3

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type MultiCountryThemeBasedBidRecommendationsApiService service
/*
MultiCountryThemeBasedBidRecommendationsApiService Get bid recommendations for multi-country ad groups
The &lt;b&gt; POST /sp/targets/bid/recommendations &lt;/b&gt; endpoint returns recommended bids for each target given either A) new ad group (a list of ad ASINs) or B) existing ad group (a campaign ID and ad group ID). Please use the recommendationType field to specify if you want to use option A or option B. This API is currently available at marketplaces where SP is available. The API supports keyword, auto and product targets. The API will return a 422 response when an unsupported marketplace or target is provided. &lt;h1&gt; Version 5.0 &lt;/h1&gt;&lt;h2&gt; New Features &lt;/h2&gt;&lt;ul&gt;&lt;li&gt; Version 5.0 introduces two new capabilities. First, advertisers will receive the estimated impressions for the suggested bid to help them understand the potential impact of adopting them. Second, advertisers will get a view of the estimated impressions for a range of bids (8 bids) for each target. &lt;/li&gt;&lt;li&gt; The second feature is default to be disabled. To enable it, user needs to set &lt;b&gt; includeAnalysis &lt;/b&gt; as True in request body. &lt;/li&gt;&lt;li&gt; New features are currently available only for existing ad group requests in US marketplace. &lt;/li&gt;&lt;/ul&gt;&lt;h1&gt; Version 4.0 &lt;/h1&gt;&lt;h2&gt; New Features &lt;/h2&gt;&lt;ul&gt;&lt;li&gt; Version 4.0 allows users to get theme-based bid recommendations for product targeting expressions, including PAT_ASIN, PAT_CATEGORY and PAT_CATEGORY_REFINEMENT. &lt;/li&gt;&lt;li&gt; Version 4.0 supports keyword, auto and product targets in all marketplaces. &lt;/li&gt;&lt;li&gt; Version 4.0 removes \&quot;impact metrics\&quot; when returning each bid suggestion. &lt;/li&gt;&lt;li&gt; Version 4.0 also allows users to get theme-based bid recommendations for keyword group targeting expressions with the type KEYWORD_GROUP. This new type is only available in US marketplace. &lt;/li&gt;&lt;/ul&gt;&lt;br&gt;  **Authorized resource type**: Global Ad Account ID  **Parameter name**: Amazon-Ads-AccountId  **Parameter in**: header  **Requires one of these permissions**: [\&quot;advertiser_campaign_edit\&quot;,\&quot;advertiser_campaign_view\&quot;]
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
 * @param amazonAdsAccountId Global Account Id Identifier.
 * @param optional nil or *MultiCountryThemeBasedBidRecommendationsApiGetMultiCountryThemeBasedBidRecommendationForAdGroupV1Opts - Optional Parameters:
     * @param "Body" (optional.Interface of BidRecommendationsBody) - 
@return MultiCountryThemeBasedBidRecommendationResponse
*/

type MultiCountryThemeBasedBidRecommendationsApiGetMultiCountryThemeBasedBidRecommendationForAdGroupV1Opts struct {
    Body optional.Interface
}

func (a *MultiCountryThemeBasedBidRecommendationsApiService) GetMultiCountryThemeBasedBidRecommendationForAdGroupV1(ctx context.Context, amazonAdvertisingAPIClientId string, amazonAdsAccountId string, localVarOptionals *MultiCountryThemeBasedBidRecommendationsApiGetMultiCountryThemeBasedBidRecommendationForAdGroupV1Opts) (MultiCountryThemeBasedBidRecommendationResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue MultiCountryThemeBasedBidRecommendationResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/sp/global/targets/bid/recommendations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := a.client.selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/vnd.spthemebasedglobalbidrecommendation.v1+json", "application/json"}

	// set Accept header
	localVarHttpHeaderAccept := a.client.selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarHeaderParams["Amazon-Advertising-API-ClientId"] = parameterToString(amazonAdvertisingAPIClientId, "")
	localVarHeaderParams["Amazon-Ads-AccountId"] = parameterToString(amazonAdsAccountId, "")
	// body params
	if localVarOptionals != nil && localVarOptionals.Body.IsSet() {
		
		localVarOptionalBody:= localVarOptionals.Body.Value()
		localVarPostBody = &localVarOptionalBody
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v MultiCountryThemeBasedBidRecommendationResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v MultiCountryThemeBasedBidRecommendationCompleteFailureResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 401 {
			var v MultiCountryThemeBasedBidRecommendationCompleteFailureResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 405 {
			var v MultiCountryThemeBasedBidRecommendationCompleteFailureResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 406 {
			var v MultiCountryThemeBasedBidRecommendationCompleteFailureResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 415 {
			var v MultiCountryThemeBasedBidRecommendationCompleteFailureResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 422 {
			var v MultiCountryThemeBasedBidRecommendationCompleteFailureResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 429 {
			var v MultiCountryThemeBasedBidRecommendationCompleteFailureResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v MultiCountryThemeBasedBidRecommendationCompleteFailureResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
