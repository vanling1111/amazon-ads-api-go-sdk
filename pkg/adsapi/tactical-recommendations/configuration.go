/*
 * Recommendations
 *
 * Sponsored Ad recommendations for Amazon Advertiser accounts.<table><tr><th>Recommendation_type</th><th>Description</th></tr><tr><td>NEW_CAMPAIGN</td><td>Create new campaigns to increase visibility</td></tr><tr><td>NEW_VIDEO_CAMPAIGN</td><td>Create new video campaigns to increase visibility</td></tr><tr><td>NEW_AD_GROUP</td><td>Create new ad groups to increase visibility</td></tr><tr><td>CAMPAIGN_BIDDING_STRATEGY</td><td>Update the bidding strategy to win at auction</td></tr><tr><td>CAMPAIGN_BUDGET</td><td>Update the campaign budget to remain active</td></tr><tr><td>CAMPAIGN_END_DATE</td><td>Update the end date of the campaign</td></tr><tr><td>CAMPAIGN_TOP_PLACEMENT</td><td>Make adjustments to compete for top of search placements</td></tr><tr><td>CAMPAIGN_PRODUCT_PLACEMENT</td><td>Make adjustments to compete for product page placements</td></tr><tr><td>CAMPAIGN_STATE</td><td>Update status of the campaign based on performance</td></tr><tr><td>NEW_CAMPAIGN_BIDDING_RULE</td><td>Create bidding rules for specific campaigns</td></tr><tr><td>CAMPAIGN_BIDDING_RULE</td><td>Update existing bidding rules</td></tr><tr><td>NEW_CAMPAIGN_BUDGET_RULE</td><td>Create new budget rules for holidays and sales events</td></tr><tr><td>CAMPAIGN_BUDGET_RULE</td><td>Update budget rules for holidays and sales events</td></tr><tr><td>AD_GROUP_STATE</td><td>Update status of the agroup based on performance</td></tr><tr><td>AD_GROUP_DEFAULT_BID</td><td>Update ad group bid values to win at auction</td></tr><tr><td>AD_GROUP_BID_OPTIMIZATION</td><td>Update ad group bid optimization strategy to improve engagement</td></tr><tr><td>NEW_KEYWORD</td><td>Create new keywords to increase visibility</td></tr><tr><td>KEYWORD_BID</td><td>Update bids for each keyword to win at auction</td></tr><tr><td>KEYWORD_STATE</td><td>Update status of keywords based on performance</td></tr><tr><td>NEW_NEGATIVE_KEYWORD</td><td>Create new negative keywords to reduce unwanted traffic</td></tr><tr><td>NEGATIVE_KEYWORD_STATE</td><td>Update status of negative keywords based on performance</td></tr><tr><td>NEW_PRODUCT_AD</td><td>Create new product ad to increase visibility</td></tr><tr><td>PRODUCT_AD_STATE</td><td>Update status of the product based on performance</td></tr><tr><td>NEW_PRODUCT_TARGETING</td><td>Create new product targets to increase visibility</td></tr><tr><td>PRODUCT_TARGETING_STATE</td><td>Update status of the product target based on performance</td></tr><tr><td>PRODUCT_TARGETING_BID</td><td>Update bids for each product target to win at auction</td></tr><tr><td>NEW_NEGATIVE_PRODUCT_TARGETING</td><td>Create new negative product targets to reduce unwanted traffic</td></tr><tr><td>NEGATIVE_PRODUCT_TARGETING_STATE</td><td>Update status of the negative product target based on performance</td></tr><tr><td>NEW_AUDIENCE_TARGETING</td><td>Create new audience targets to increase visibility</td></tr><tr><td>AUDIENCE_TARGETING_STATE</td><td>Update status of the audience target based on performance</td></tr><tr><td>AUDIENCE_TARGETING_BID</td><td>Update bids for each audience target to win at auction</td></tr><tr><td>NEW_NEGATIVE_AUDIENCE_TARGETING</td><td>Create new negative audience targets to reduce unwanted traffic</td></tr><tr><td>NEGATIVE_AUDIENCE_TARGETING_STATE</td><td>Update status of the negative audience target based on performance</td></tr></table>
 *
 * API version: 3.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package tacticalrecommendations

import (
	"net/http"
)

// contextKeys are used to identify the type of value in the context.
// Since these are string, it is possible to get a short description of the
// context key for logging and debugging using key.String().

type contextKey string

func (c contextKey) String() string {
	return "auth " + string(c)
}

var (
	// ContextOAuth2 takes a oauth2.TokenSource as authentication for the request.
	ContextOAuth2 = contextKey("token")

	// ContextBasicAuth takes BasicAuth as authentication for the request.
	ContextBasicAuth = contextKey("basic")

	// ContextAccessToken takes a string oauth2 access token as authentication for the request.
	ContextAccessToken = contextKey("accesstoken")

	// ContextAPIKey takes an APIKey as authentication for the request
	ContextAPIKey = contextKey("apikey")
)

// BasicAuth provides basic http authentication to a request passed via context using ContextBasicAuth
type BasicAuth struct {
	UserName string `json:"userName,omitempty"`
	Password string `json:"password,omitempty"`
}

// APIKey provides API key based authentication to a request passed via context using ContextAPIKey
type APIKey struct {
	Key    string
	Prefix string
}

type Configuration struct {
	BasePath      string            `json:"basePath,omitempty"`
	Host          string            `json:"host,omitempty"`
	Scheme        string            `json:"scheme,omitempty"`
	DefaultHeader map[string]string `json:"defaultHeader,omitempty"`
	UserAgent     string            `json:"userAgent,omitempty"`
	HTTPClient    *http.Client
}

func NewConfiguration() *Configuration {
	cfg := &Configuration{
		BasePath:      "/",
		DefaultHeader: make(map[string]string),
		UserAgent:     "Swagger-Codegen/1.0.0/go",
	}
	return cfg
}

func (c *Configuration) AddDefaultHeader(key string, value string) {
	c.DefaultHeader[key] = value
}
