
/*
 * Insights
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 3.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package insights

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"fmt"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type AudienceInsightsApiService service
/*
AudienceInsightsApiService Retrieves the top audiences that overlap with the provided audience.
  **Requires one of these permissions**: [\&quot;advertiser_campaign_edit\&quot;,\&quot;advertiser_campaign_view\&quot;]
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
 * @param amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
 * @param audienceId The identifier of an audience.
 * @param adType The advertising program.
 * @param optional nil or *AudienceInsightsApiInsightsGetAudiencesOverlappingAudiencesOpts - Optional Parameters:
     * @param "AdvertiserId" (optional.String) -  The identifier of the advertiser you&#x27;d like to retrieve overlapping audiences for. This parameter is required for the DSP adType, but is optional for the SD adType.
     * @param "MinimumOverlapAffinity" (optional.Float64) -  If specified, the affinities of all returned overlapping audiences will be at least the provided affinity.
     * @param "MaximumOverlapAffinity" (optional.Float64) -  If specified, the affinities of all returned overlapping audiences will be at most the provided affinity.
     * @param "AudienceCategory" (optional.Interface of []string) -  If specified, the categories of all returned overlapping audiences will be one of the provided categories.
     * @param "MaxResults" (optional.Int32) -  Sets the maximum number of overlapping audiences in the response. This parameter is supported only for request to return &#x60;application/vnd.insightsaudiencesoverlap.v2+json&#x60;.
     * @param "NextToken" (optional.String) -  Token to be used to request additional overlapping audiences. If not provided, the top 30 overlapping audiences are returned. Note: subsequent calls must be made using the same parameters as used in previous requests.
@return InlineResponse200
*/

type AudienceInsightsApiInsightsGetAudiencesOverlappingAudiencesOpts struct {
    AdvertiserId optional.String
    MinimumOverlapAffinity optional.Float64
    MaximumOverlapAffinity optional.Float64
    AudienceCategory optional.Interface
    MaxResults optional.Int32
    NextToken optional.String
}

func (a *AudienceInsightsApiService) InsightsGetAudiencesOverlappingAudiences(ctx context.Context, amazonAdvertisingAPIClientId string, amazonAdvertisingAPIScope string, audienceId string, adType string, localVarOptionals *AudienceInsightsApiInsightsGetAudiencesOverlappingAudiencesOpts) (InlineResponse200, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponse200
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/insights/audiences/{audienceId}/overlappingAudiences"
	localVarPath = strings.Replace(localVarPath, "{"+"audienceId"+"}", fmt.Sprintf("%v", audienceId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("adType", parameterToString(adType, ""))
	if localVarOptionals != nil && localVarOptionals.AdvertiserId.IsSet() {
		localVarQueryParams.Add("advertiserId", parameterToString(localVarOptionals.AdvertiserId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinimumOverlapAffinity.IsSet() {
		localVarQueryParams.Add("minimumOverlapAffinity", parameterToString(localVarOptionals.MinimumOverlapAffinity.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaximumOverlapAffinity.IsSet() {
		localVarQueryParams.Add("maximumOverlapAffinity", parameterToString(localVarOptionals.MaximumOverlapAffinity.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AudienceCategory.IsSet() {
		localVarQueryParams.Add("audienceCategory", parameterToString(localVarOptionals.AudienceCategory.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.MaxResults.IsSet() {
		localVarQueryParams.Add("maxResults", parameterToString(localVarOptionals.MaxResults.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NextToken.IsSet() {
		localVarQueryParams.Add("nextToken", parameterToString(localVarOptionals.NextToken.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/vnd.insightsaudiencesoverlap.v2+json", "application/vnd.insightserror.v1+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarHeaderParams["Amazon-Advertising-API-ClientId"] = parameterToString(amazonAdvertisingAPIClientId, "")
	localVarHeaderParams["Amazon-Advertising-API-Scope"] = parameterToString(amazonAdvertisingAPIScope, "")
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse200
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v InsightsError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 403 {
			var v InsightsError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 404 {
			var v InsightsError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
