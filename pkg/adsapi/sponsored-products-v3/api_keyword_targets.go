
/*
 * Sponsored Products
 *
 *  
 *
 * API version: 3.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package sponsoredproductsv3

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type KeywordTargetsApiService service
/*
KeywordTargetsApiService Get global keyword recommendations
The &lt;b&gt; POST /sp/global/targets/keywords/recommendations/list &lt;/b&gt; endpoint returns recommended keyword targets for a list of countries given either A) a list of ad ASINs per target country or B) a global campaign ID and ad group ID. Please use the recommendationType field to specify if you want to use option A or option B. This endpoint will also return recommended bids along with each recommendation keyword target.&lt;br&gt;&lt;br&gt; &lt;b&gt; Asins&lt;/b&gt; &lt;br&gt;Global API endpoint accepts &lt;b&gt;asins&lt;/b&gt; array. Item is a &lt;b&gt;country asin map&lt;/b&gt; Key is the 2-letter country code. Value is an asin.&lt;br&gt;&lt;br&gt; &lt;b&gt; Targets&lt;/b&gt; &lt;br&gt;Global API endpoint accepts &lt;b&gt;targets&lt;/b&gt; array. Item is a &lt;b&gt;country target object&lt;/b&gt; Object has two fields: matchType and countryKeywords. CountryKeywords is a map with a key as the 2-letter country code and value as a keyword object. &lt;br/&gt;&lt;br/&gt;Each country will be processed in parallel according to rules of &lt;a href&#x3D;\&quot;https://advertising.amazon.com/API/docs/en-us/sponsored-products/3-0/openapi/prod#tag/Keyword-Targets:~:text&#x3D;keywords/localize%20endpoint.-,Version%205.0,-New%20Features\&quot;&gt;version 5&lt;/a&gt; recommendation API.&lt;h3&gt; Availability &lt;/h3&gt; Global keyword recommendation API is available in all the marketplaces.  **Authorized resource type**: Global Ad Account ID, Profile ID  **Parameter name**: Amazon-Ads-AccountId  **Parameter in**: header  **Requires one of these permissions**: [\&quot;advertiser_campaign_edit\&quot;,\&quot;advertiser_campaign_view\&quot;]
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
 * @param amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
 * @param amazonAdsAccountId The identifier of a profile associated with the advertiser account. Used for authentication of Global Account.
 * @param optional nil or *KeywordTargetsApiGetGlobalRankedKeywordRecommendationOpts - Optional Parameters:
     * @param "Body" (optional.Interface of RecommendationsListBody) - 
     * @param "AmazonAdvertisingAPIMarketplaceId" (optional.String) -  The advertiser&#x27;s Marketplace ID associated with the advertiser account to support single marketplace request. Will not be used if global account id is provided.
     * @param "AmazonAdvertisingAPIAdvertiserId" (optional.String) -  The advertiser&#x27;s ID associated with the advertiser account to support single marketplace request. Will not be used if global account id is provided.
@return GlobalRankedTargetWithThemedBidsResponse
*/

type KeywordTargetsApiGetGlobalRankedKeywordRecommendationOpts struct {
    Body optional.Interface
    AmazonAdvertisingAPIMarketplaceId optional.String
    AmazonAdvertisingAPIAdvertiserId optional.String
}

func (a *KeywordTargetsApiService) GetGlobalRankedKeywordRecommendation(ctx context.Context, amazonAdvertisingAPIClientId string, amazonAdvertisingAPIScope string, amazonAdsAccountId string, localVarOptionals *KeywordTargetsApiGetGlobalRankedKeywordRecommendationOpts) (GlobalRankedTargetWithThemedBidsResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue GlobalRankedTargetWithThemedBidsResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/sp/global/targets/keywords/recommendations/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/vnd.spkeywordsrecommendation.v5+json"}

	// set Content-Type header
	localVarHttpContentType := a.client.selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/vnd.spkeywordsrecommendation.v5+json", "application/json"}

	// set Accept header
	localVarHttpHeaderAccept := a.client.selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.AmazonAdvertisingAPIMarketplaceId.IsSet() {
		localVarHeaderParams["Amazon-Advertising-API-MarketplaceId"] = parameterToString(localVarOptionals.AmazonAdvertisingAPIMarketplaceId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.AmazonAdvertisingAPIAdvertiserId.IsSet() {
		localVarHeaderParams["Amazon-Advertising-API-AdvertiserId"] = parameterToString(localVarOptionals.AmazonAdvertisingAPIAdvertiserId.Value(), "")
	}
	localVarHeaderParams["Amazon-Advertising-API-ClientId"] = parameterToString(amazonAdvertisingAPIClientId, "")
	localVarHeaderParams["Amazon-Advertising-API-Scope"] = parameterToString(amazonAdvertisingAPIScope, "")
	localVarHeaderParams["Amazon-Ads-AccountId"] = parameterToString(amazonAdsAccountId, "")
	// body params
	if localVarOptionals != nil && localVarOptionals.Body.IsSet() {
		
		localVarOptionalBody:= localVarOptionals.Body.Value()
		localVarPostBody = &localVarOptionalBody
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v GlobalRankedTargetWithThemedBidsResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v SpTargetingCountryErrors
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 401 {
			var v SpTargetingCountryErrors
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 415 {
			var v SpTargetingCountryErrors
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 422 {
			var v SpTargetingCountryErrors
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 429 {
			var v SpTargetingCountryErrors
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v SpTargetingCountryErrors
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 503 {
			var v SpTargetingCountryErrors
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
KeywordTargetsApiService Get keyword recommendations
The &lt;b&gt; POST /sp/targets/keywords/recommendations &lt;/b&gt; endpoint returns recommended keyword targets given either A) a list of ad ASINs or B) a campaign ID and ad group ID. Please use the recommendationType field to specify if you want to use option A or option B. This endpoint will also return recommended bids along with each recommendation keyword target.&lt;br&gt;&lt;br&gt; &lt;b&gt; Ranking &lt;/b&gt; &lt;br&gt; The keyword recommendations will be ranked in descending order of clicks or impressions, depending on the &lt;b&gt;sortDimension&lt;/b&gt; field provided by the user. You may also input your own keyword targets to be ranked alongside the keyword recommendations by using the &lt;b&gt;targets&lt;/b&gt; array. &lt;br&gt;&lt;br&gt; &lt;b&gt; Localization &lt;/b&gt; &lt;br&gt; Use the &lt;b&gt; locale &lt;/b&gt; field to get keywords in your specified locale. Supported marketplace to locale mappings can be found at the &lt;a href&#x3D;&#x27;https://advertising.amazon.com/API/docs/en-us/localization/#/Keyword%20Localization&#x27;&gt;POST /keywords/localize&lt;/a&gt; endpoint. &lt;h1&gt; Version 5.0 &lt;/h1&gt;  &lt;h2&gt; New Features &lt;/h2&gt; Version 5.0 utilizes the new theme-based bid recommendations, which can be retrieved at the endpoint &lt;b&gt;/sp/targets/bid/recommendations&lt;/b&gt;, to return improved bid recommendations for each keyword. Theme-based bid recommendations provide \\\\\\\&quot;themes\\\\\\\&quot; and \\\\\\\&quot;impact metrics\\\\\\\&quot; along with each bid suggestion to help you choose the right bid for your keyword target.&lt;br&gt;&lt;br&gt;&lt;b&gt;Themes&lt;/b&gt;&lt;br&gt; We now may return multiple bid suggestions for each keyword target. Each suggestion will have a theme to express the business objective of the bid. Available themes are: &lt;ul&gt; &lt;li&gt; CONVERSION_OPPORTUNITIES - The default theme which aims to maximize number of conversions. &lt;/li&gt; &lt;li&gt; SPECIAL_DAYS - A theme available during high sales events such as Prime Day, to anticipate an increase in sales and competition.&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Impact Metrics&lt;/b&gt;&lt;br&gt;We have added impact metrics which provide insight on the number of clicks and conversions you will receive for targeting a keyword at a certain bid. &lt;br&gt;&lt;br&gt;&lt;b&gt;Bidding Strategy&lt;/b&gt;&lt;br&gt; You may now specify your bidding strategy in the KEYWORDS_BY_ASINS request to get bid suggestions tailored to your bidding strategy. For KEYWORDS_BY_ADGROUP requests, you will not specify a bidding strategy, because the bidding strategy of the ad group is used. The three bidding strategies are: &lt;ul&gt; &lt;li&gt; LEGACY_FOR_SALES - Dynamic bids (down only) &lt;/li&gt; &lt;li&gt; AUTO_FOR_SALES - Dynamic bids (up and down) &lt;/li&gt; &lt;li&gt; MANUAL - Fixed bids &lt;/li&gt; &lt;/ul&gt; &lt;h3&gt; Availability &lt;/h3&gt; Version 5.0 is only available in the following marketplaces: US, CA, BR, MX, UK, DE, FR, ES, IN, IT, NL, AE, SA, TR, EG, BE, SE, PL, JP, AU, SG. &lt;h1&gt; Version 4.0 &lt;/h1&gt; &lt;h2&gt; New features &lt;/h2&gt; Version 4.0 allows users to retrieve recommended keyword targets which are sorted in descending order of clicks or conversions. The default sort dimension, if not specified, ranks recommendations by our interal ranking mechanism. We have also added search term metrics. &lt;b&gt; Search term impression share &lt;/b&gt; indicates the percentage share of all ad-attributed impressions you received on that keyword in the last 30 days. This metric helps advertisers identify potential opportunities based on their share on relevant keywords. &lt;b&gt; Search term impression rank &lt;/b&gt; indicates your ranking among all advertisers for the keyword by ad impressions in a marketplace. It tells an advertiser how many advertisers had higher share of ad impressions. &lt;i&gt; Search term information is only available for keywords the advertiser targeted with ad impressions. &lt;/i&gt; &lt;h3&gt; Availability &lt;/h3&gt; Version 4.0 is available in all marketplaces.  **Requires one of these permissions**: [\&quot;advertiser_campaign_edit\&quot;,\&quot;advertiser_campaign_view\&quot;]
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
 * @param amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
 * @param optional nil or *KeywordTargetsApiGetRankedKeywordRecommendationOpts - Optional Parameters:
     * @param "Body" (optional.Interface of KeywordsRecommendationsBody) - 
     * @param "AmazonAdvertisingAPIMarketplaceId" (optional.String) -  The advertiser&#x27;s Marketplace ID associated with the advertiser. account.
     * @param "AmazonAdvertisingAPIAdvertiserId" (optional.String) -  The advertiser&#x27;s ID associated with the advertiser account.
@return KeywordTargetResponse
*/

type KeywordTargetsApiGetRankedKeywordRecommendationOpts struct {
    Body optional.Interface
    AmazonAdvertisingAPIMarketplaceId optional.String
    AmazonAdvertisingAPIAdvertiserId optional.String
}

func (a *KeywordTargetsApiService) GetRankedKeywordRecommendation(ctx context.Context, amazonAdvertisingAPIClientId string, amazonAdvertisingAPIScope string, localVarOptionals *KeywordTargetsApiGetRankedKeywordRecommendationOpts) (KeywordTargetResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue KeywordTargetResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/sp/targets/keywords/recommendations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/vnd.spkeywordsrecommendation.v3+json", "application/vnd.spkeywordsrecommendation.v4+json", "application/vnd.spkeywordsrecommendation.v5+json"}

	// set Content-Type header
	localVarHttpContentType := a.client.selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/vnd.spkeywordsrecommendation.v3+json", "application/vnd.spkeywordsrecommendation.v4+json", "application/vnd.spkeywordsrecommendation.v5+json"}

	// set Accept header
	localVarHttpHeaderAccept := a.client.selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.AmazonAdvertisingAPIMarketplaceId.IsSet() {
		localVarHeaderParams["Amazon-Advertising-API-MarketplaceId"] = parameterToString(localVarOptionals.AmazonAdvertisingAPIMarketplaceId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.AmazonAdvertisingAPIAdvertiserId.IsSet() {
		localVarHeaderParams["Amazon-Advertising-API-AdvertiserId"] = parameterToString(localVarOptionals.AmazonAdvertisingAPIAdvertiserId.Value(), "")
	}
	localVarHeaderParams["Amazon-Advertising-API-ClientId"] = parameterToString(amazonAdvertisingAPIClientId, "")
	localVarHeaderParams["Amazon-Advertising-API-Scope"] = parameterToString(amazonAdvertisingAPIScope, "")
	// body params
	if localVarOptionals != nil && localVarOptionals.Body.IsSet() {
		
		localVarOptionalBody:= localVarOptionals.Body.Value()
		localVarPostBody = &localVarOptionalBody
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v KeywordTargetResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v SpTargetingError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 401 {
			var v SpTargetingError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 415 {
			var v SpTargetingError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 422 {
			var v SpTargetingError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 429 {
			var v SpTargetingError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v SpTargetingError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 503 {
			var v SpTargetingError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
